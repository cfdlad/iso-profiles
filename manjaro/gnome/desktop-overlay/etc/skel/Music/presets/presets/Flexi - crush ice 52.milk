MILKDROP_PRESET_VERSION=201
PSVERSION=2
PSVERSION_WARP=2
PSVERSION_COMP=2
[preset00]
fRating=5.000
fGammaAdj=1.000
fDecay=1.000
fVideoEchoZoom=2.000
fVideoEchoAlpha=0.000
nVideoEchoOrientation=0
nWaveMode=1
bAdditiveWaves=1
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=1
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.009
fWaveScale=2.713
fWaveSmoothing=0.000
fWaveParam=0.000
fModWaveAlphaStart=1.200
fModWaveAlphaEnd=1.200
fWarpAnimSpeed=0.204
fWarpScale=8.471
fZoomExponent=1.00000
fShader=0.000
zoom=0.99951
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.15038
sx=1.00000
sy=1.00000
wave_r=0.440
wave_g=0.400
wave_b=1.000
wave_x=0.500
wave_y=0.500
ob_size=0.005
ob_r=0.010
ob_g=0.000
ob_b=0.000
ob_a=1.000
ib_size=0.260
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.850
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
wavecode_0_scaling=5.92556
wavecode_0_smoothing=0.00000
wavecode_0_r=0.000
wavecode_0_g=0.000
wavecode_0_b=0.400
wavecode_0_a=0.340
wave_0_init1=t2 = 0
wave_0_per_frame1=t1 = q13;
wave_0_per_frame2=t2 = q14;
wave_0_per_frame3=t3 = q3;
wave_0_per_frame4=t4 = q4;
wave_0_per_frame5=t5 = q5;
wave_0_per_frame6=t6 = q6;
wave_0_per_frame7=t7 = q7;
wave_0_per_frame8=t8 = q8;
wave_0_per_point1=sample = 1-sample;
wave_0_per_point2=xxx = xx;
wave_0_per_point3=yyy = yy;
wave_0_per_point4=xx = pow(sample,5)*t1 + 5*pow(sample,4)*(1-sample)*t1 + 10*pow(sample,3)*sqr(1-sample)*t2
wave_0_per_point5=+ 10*sqr(sample)*pow(1-sample,3)*t3 + 5*pow(1-sample,4)*sample*t4 + pow(1-sample,5)*t4;
wave_0_per_point6=
wave_0_per_point7=yy = pow(sample,5)*t5 + 5*pow(sample,4)*(1-sample)*t5 + 10*pow(sample,3)*sqr(1-sample)*t6
wave_0_per_point8=+ 10*sqr(sample)*pow(1-sample,3)*t7 + 5*pow(1-sample,4)*sample*t8 + pow(1-sample,5)*t8;
wave_0_per_point9=
wave_0_per_point10=d = 1/sqrt(sqr(xx-xxx)+sqr(yy-yyy));
wave_0_per_point11=dd = dd*0.95 + (value1);
wave_0_per_point12=ddd = dd*sample*(1-sample)*d;
wave_0_per_point13=ddd = sample*(1-sample)*sin(sample*120)*d*0.1;
wave_0_per_point14=x = xx + (yy-yyy)*ddd;
wave_0_per_point15=y = yy - (xx-xxx)*ddd;
wave_0_per_point16=
wave_0_per_point17=x = 0.5 + (x-0.5)*q9;
wave_0_per_point18=y = 0.5 + (y-0.5)*q10;
wave_0_per_point19=
shapecode_0_enabled=1
shapecode_0_sides=12
shapecode_0_additive=1
shapecode_0_thickOutline=0
shapecode_0_textured=0
shapecode_0_num_inst=2
shapecode_0_x=0.490
shapecode_0_y=0.500
shapecode_0_rad=0.09902
shapecode_0_ang=0.00000
shapecode_0_tex_ang=0.00000
shapecode_0_tex_zoom=4.36077
shapecode_0_r=1.000
shapecode_0_g=0.000
shapecode_0_b=0.000
shapecode_0_a=1.000
shapecode_0_r2=0.000
shapecode_0_g2=0.000
shapecode_0_b2=0.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shape_0_per_frame1=x = rand(1000)/1000;
shape_0_per_frame2=y = rand(1000)/1000;
shape_0_per_frame3=ang = rand(150)/100;
shapecode_1_enabled=1
shapecode_1_sides=36
shapecode_1_additive=1
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.81623
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=0.000
shapecode_1_g=0.040
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.000
shapecode_1_b2=0.000
shapecode_1_a2=0.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.000
shape_1_per_frame1=x = 1-q1;
shape_1_per_frame2=y = q2;
shape_1_per_frame3=x = 0.5 + (x - 0.5)*0.25;
shape_1_per_frame4=y = 0.5 + (y - 0.5)*0.25;
per_frame_init_1=x1 = 0;
per_frame_init_2=y1= .001;
per_frame_init_3=z1 = 0;
per_frame_1=zoom = 1;
per_frame_2=warp = 0;
per_frame_3=wave_a = 0;
per_frame_4=
per_frame_5=
per_frame_6=// below parameters belong to an extended "Lotka-Volterra" model (simple predator-prey differential equation system - see wikipedia)
per_frame_7=
per_frame_8=startx = 0.7; // initial predator population (used only for the phase plot)
per_frame_9=starty = 0.7; // initial prey population
per_frame_10=
per_frame_11=a = 1.0; // LV-model parameters - some pairs reach a so-called limit-cycle
per_frame_12=b = 0.14;
per_frame_13=d = 0.2;
per_frame_14=
per_frame_15=q1 = aspectx;
per_frame_16=q2 = aspecty;
per_frame_17=
per_frame_18=q3 = startx;
per_frame_19=q4 = starty;
per_frame_20=
per_frame_21=q5 = a; // the model parameters are synchronized for the phase plot wave and the per-vertex warp
per_frame_22=q6 = b;
per_frame_23=q7 = d;
per_frame_24=
per_frame_25=
per_frame_26=vol = bass*8 + mid*5 + treb*3;
per_frame_27=m = m*0.97 + vol*0.08;
per_frame_28=monitor = vol;
per_frame_29=beat = above(vol,res)*above(vol,m)*above(vol,16);
per_frame_30=diff = (1-beat)*diff + beat*(vol-res);
per_frame_31=res = beat*(vol + m*0.04) + (1-beat)*(res -  (0.1+diff*0.02)*60/fps);
per_frame_32=res = max(0,res);
per_frame_33=
per_frame_34=w = if(beat,rand(3.14*2),w);
per_frame_35=x = if(beat,rand(1),x);
per_frame_36=y = if(beat,rand(1),y);
per_frame_37=
per_frame_38=// below parameters belong to a synchronized affine transformation for waves and the per-vertex code (rotate, scale, translate)
per_frame_39=
per_frame_40=//w = time*0.1;
per_frame_41=q26 = 0.5*x; // center for rotation and scaling (x)
per_frame_42=q27 = 0.5*y; // center for rotation and scaling (y)
per_frame_43=q28 = 1; // scale
per_frame_44=q29 = 0.4; // translate x
per_frame_45=q30 = 0.1; // translate y
per_frame_46=q31 = sin(w);
per_frame_47=q32 = cos(w);
per_frame_48=q25 = w;
per_frame_49=// TODO: compensate parameter changes for an invariant canvas pane via difference quotients ;)
per_pixel_1=x = 0.5 + (x-0.5)*q1;
per_pixel_2=y = 0.5 - (y-0.5)*q2;
per_pixel_3=
per_pixel_4=x = q26 + (x-q26)/q28 - q29;
per_pixel_5=y = q27 + (y-q27)/q28 - q30;
per_pixel_6=
per_pixel_7=// have a nice warp effect? - rotate it like a shape!
per_pixel_8=
per_pixel_9=  angle = -q25;
per_pixel_10=
per_pixel_11=/////////////////////////////////////////////////////////
per_pixel_12=X1 = x - q26;
per_pixel_13=Y1 = y - q27;
per_pixel_14=x = q26 + cos(-angle)*X1 -sin(-angle)*Y1; // rotate the x/y pane
per_pixel_15=y = q27 + sin(-angle)*X1 +cos(-angle)*Y1;
per_pixel_16=/////////////////////////////////////////////////////////
per_pixel_17=
per_pixel_18=
per_pixel_19=dx = x*(1-x)-q5*x*y/(x+q6);
per_pixel_20=dy = -q7*y*(1-y/x);
per_pixel_21=
per_pixel_22=dx = -0.01*dx/q1;
per_pixel_23=dy = -0.01*dy/q2;
per_pixel_24=
per_pixel_25=
per_pixel_26=//dx = 0;
per_pixel_27=//dy = 0;
per_pixel_28=
per_pixel_29=/////////////////////////////////////////////////////////
per_pixel_30=dx1 = cos(angle)*dx - sin(angle)*dy; // and finally the dx/dy pane is rotated to match the x/y pane
per_pixel_31=dy1 = sin(angle)*dx + cos(angle)*dy;
per_pixel_32=dx = dx1*aspectx;
per_pixel_33=dy = dy1*aspecty;
per_pixel_34=/////////////////////////////////////////////////////////
warp_1=`shader_body
warp_2=`{
warp_3=`    float2 d = texsize.zw * 8;
warp_4=`    float3 dx = ( 2*GetBlur1(uv + float2(1,0)*d) - 2*GetBlur1(uv-float2(1,0)*d) )*0.5;
warp_5=`    float3 dy = ( 2*GetBlur1(uv + float2(0,1)*d) - 2*GetBlur1(uv-float2(0,1)*d) )*0.5;
warp_6=`    float2 dither_uv = uv_orig*texsize.xy*texsize_noise_lq.zw * 1 + rand_frame.xy;
warp_7=`
warp_8=`float2 uv_blue = lerp(uv_orig,uv,1) + float2(dx.z,dy.z)*texsize.zw*4;
warp_9=`ret.z = GetPixel(uv_blue).z  - (2*GetPixel(uv_blue).z - 2*GetBlur3(uv_blue).z)*0.01 - 0.008
warp_10=`            +(tex2D(sampler_noise_lq, dither_uv).xyz-0.5) *0.1;
warp_11=`
warp_12=`
warp_13=`float2 uv_red = 0.5 + (uv-0.5) - float2(0,0)*texsize.zw - float2(dx.x,dy.x)*texsize.zw;
warp_14=`ret.x = tex2D( sampler_main, uv_red ).x;
warp_15=`ret.x += (2*ret.x - 2*GetBlur3(uv_red)).x*0.2 + 0.006;
warp_16=`
warp_17=`
warp_18=`float2 uv_green = lerp(uv_orig,uv,1) - float2(dx.x,dy.x)*texsize.zw*8
warp_19=`                                       + float2(dx.y,dy.y)*texsize.zw*4
warp_20=`                                       + float2(dx.z,dy.z)*texsize.zw*8;
warp_21=`ret.y = tex2d(sampler_fc_main,uv_green).y;
warp_22=`ret.y *= 1 + ret.x*0.1;
warp_23=`ret.y -= 0.004 + saturate(ret.z)*0.012;
warp_24=`}
comp_1=`shader_body
comp_2=`{
comp_3=`    float2 d = texsize.zw*4;
comp_4=`    float3 dx = ( GetBlur1(uv+float2(1,0)*d)-GetBlur1(uv-float2(1,0)*d) );
comp_5=`    float3 dy = ( GetBlur1(uv+float2(0,1)*d)-GetBlur1(uv-float2(0,1)*d) );
comp_6=`float2 uv_bg = uv - float2(dx.y,dy.y)*texsize.zw*16;
comp_7=`ret = (GetBlur2(uv_bg)-GetBlur1(uv_bg)*1+GetPixel(uv_bg)*0.9 + (-dx.y + dy.y)*0.4).y*0.8*float3(1,1.1,1.2);
comp_8=`
comp_9=`float2 uv_m = uv - float2(dx.x,dy.x)*texsize.zw*8;
comp_10=`ret = lerp(ret, 2*float3(0,0.5,1), GetBlur3(uv_m - float2(dx.y,dy.y)*0.4).x*0.4);
comp_11=`ret = lerp(ret, 2*float3(0.5,1,1), GetBlur2(uv_m - float2(dx.y,dy.y)*0.2).x*0.4);
comp_12=`ret = lerp(ret, 2*float3(1,1,0.8), GetBlur1(uv_m - float2(dx.y,dy.y)*0.1).x*0.2);
comp_13=`//ret = lerp(ret, float3(0.5,0,1), GetPixel(uv_m).x*0.4);
comp_14=`}
