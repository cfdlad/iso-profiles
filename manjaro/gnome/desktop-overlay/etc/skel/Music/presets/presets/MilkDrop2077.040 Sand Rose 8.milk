MILKDROP_PRESET_VERSION=300
PSVERSION=3
PSVERSION_WARP=2
PSVERSION_COMP=3
[preset00]
fRating=3.000
fGammaAdj=1.000
fDecay=0.925
fVideoEchoZoom=1.007
fVideoEchoAlpha=0.000
nVideoEchoOrientation=3
nWaveMode=9
bAdditiveWaves=0
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=0
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=1.000
fWaveScale=0.634
fWaveSmoothing=0.100
fWaveParam=0.000
fModWaveAlphaStart=0.750
fModWaveAlphaEnd=0.950
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.650
wave_g=0.650
wave_b=0.650
wave_x=0.500
wave_y=0.380
ob_size=0.000
ob_r=0.000
ob_g=0.100
ob_b=0.000
ob_a=0.300
ib_size=0.000
ib_r=0.250
ib_g=0.250
ib_b=0.250
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.000
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=0.500
b2x=1.000
b3x=1.000
b1ed=0.250
per_frame_init_1=n = 0; loop (15000,megabuf(n) =0;gmegabuf(n) = 0; n+=1;);
per_frame_init_2=flen = 128; shapes = 16; reg01 = shapes;
per_frame_init_3=minbpm=100; maxbpm=300; num_res=100;
per_frame_init_4=slow = 1; r1=8; r2=1; run = 0; bvol_=0; dir = 1; tlen=2.5; ndir = 1; size_=1; vol_=1; certain = 1; movarg = rand(100);
per_frame_init_5=lc = rand(2)-1; tr1 = rand(5); tr2 = rand(5); r5 = rand(6); r9 = rand(1); vc_=rand(10); r3=2; tubes = pow(2,1+int(rand(3)));
per_frame_init_6=start = time; ray_=0;
per_frame_1=dec_f = 1-10/fps; dec_m = 1-3/fps; dec_s = 1-1/fps; dt=1/fps;
per_frame_2=
per_frame_3=maxind = 0; qavg = 0.1; i=0; 
per_frame_4=bvol = max(0.1,(bass+mid+treb)/3); bvol_=bvol_*dec_m + (1-dec_m)*bvol;
per_frame_5=Excite = (bvol-bvol_);
per_frame_6=loop (num_res,
per_frame_7=  n = i*8;
per_frame_8=  Freq  = (i/(num_res-1)+minbpm/(maxbpm-minbpm))*(maxbpm-minbpm)/60;
per_frame_9=  Feder = sqr(Freq*6.2832);
per_frame_10=  megabuf (n+4) = megabuf(n+1); megabuf (n+1) *= 1-0.25*dt; 
per_frame_11=  EC_Steps = int (8*Freq*dt)+1;
per_frame_12=  loop (EC_Steps, // Euler-Cauchy steps
per_frame_13=    Kraft = Excite - Feder*megabuf(n + 2) ;
per_frame_14=    megabuf (n+1) += Kraft        * dt/EC_Steps;
per_frame_15=    megabuf (n+2) += megabuf(n+1) * dt/EC_Steps;  );
per_frame_16=  beatcos = megabuf(n+1);  beatsin = megabuf(n+2)*Freq*6.2832;
per_frame_17=  quad = sqrt (pow(beatsin,2) + pow(beatcos,2));
per_frame_18=  megabuf (n+3) = megabuf(n+3) *dec_m +  quad* (1-dec_m);
per_frame_19=  if (megabuf(n+3) > megabuf (maxind*8+3), maxind =i,0);
per_frame_20=  qavg = qavg+pow (megabuf(n+3),2);
per_frame_21=  i += 1;);
per_frame_22=
per_frame_23=qavg = sqrt (qavg/num_res); 
per_frame_24=qdev = 0; i =0; loop (num_res, qdev += pow(megabuf(i+3)-qavg,2); i += 8; );
per_frame_25=qdev = sqrt (qdev/num_res);
per_frame_26=BPM =   (maxind/(num_res-1)+minbpm/(maxbpm-minbpm))*(maxbpm-minbpm);
per_frame_27=if (BPM > 200, BPM *= 0.5, 0);
per_frame_28=
per_frame_29=m1 = maxind*8;
per_frame_30=certain = certain * dec_m + (1-dec_m) * megabuf(m1+3)/qavg;
per_frame_31=dbl_beat = megabuf(m1+1) * megabuf (m1+4) < 0;
per_frame_32=sgl_beat = dbl_beat * (megabuf (m1+4) < 0);
per_frame_33=bcount += dbl_beat;is_rbeat  = dbl_beat && (bcount%2==0);
per_frame_34=bcount2 += is_rbeat;
per_frame_35=trel1 += BPM/60*dt/2;
per_frame_36=
per_frame_37=n = 0; vol = .0; bbase = 10000;
per_frame_38=loop (flen,
per_frame_39=  value = gmegabuf(n)/vol_;
per_frame_40=  trig = value > megabuf(bbase+n)*1.5*30/fps; 
per_frame_41=  megabuf (bbase+n) = value;
per_frame_42=  dec = if(trig,dec_f,dec_m); 
per_frame_43=  megabuf(n+5000) = megabuf(n+5000)*dec + (1-dec)*value;
per_frame_44=  vol = vol + pow(megabuf(n+5000),2);
per_frame_45=  n += 1;
per_frame_46=);
per_frame_47=
per_frame_48=vol = sqrt(vol);
per_frame_49=vol_ = dec_s*vol_ + (1-dec_s)*vol*7;
per_frame_50=
per_frame_51=// post smoothing
per_frame_52=n = 0;
per_frame_53=loop (flen,
per_frame_54=  value = megabuf(n+5000) * 5*n/(1+5*n);
per_frame_55=  dec = if (megabuf(4000+n)<=value,.9,.9);
per_frame_56=  dec = dec_f; 
per_frame_57=  megabuf(n+4000) = megabuf(n+4000)*dec+ (1-dec)*value;
per_frame_58=  n = n+1;
per_frame_59=);
per_frame_60=
per_frame_61=
per_frame_62=// Berechnung Ortskoordinaten aus Spektrum
per_frame_63=step = flen/shapes/2+1; 
per_frame_64=n = 2000; m = 4000+step; k=0; slope = 0.01; speed = 0.4/slope; size = 0;
per_frame_65=loop (shapes,
per_frame_66=   //rad, ang slope limitation
per_frame_67=   x0 = megabuf(m)-megabuf(m+1);
per_frame_68=   y0 = megabuf(m)-megabuf(m-1);
per_frame_69=   radi = sqrt (x0*x0+y0*y0);
per_frame_70=   angi = atan2 (x0,y0);
per_frame_71=   j=n+4000;
per_frame_72=   megabuf(j)   +=min(slope, max (-slope, radi-megabuf(j)))*speed/fps; 
per_frame_73=   megabuf(j+1) +=min(10*slope, max (-10*slope, angi-megabuf(j+1)))*speed/fps; 
per_frame_74=   megabuf(n)   = megabuf(j)*cos(megabuf(j+1));
per_frame_75=   megabuf(n+1) = megabuf(j)*sin(megabuf(j+1));
per_frame_76=  size += pow (megabuf(n),2)+pow (megabuf(n+1),2);
per_frame_77=  dec = if (bvol2 > bvol,dec_m, dec_m);
per_frame_78=  bvol2 = dec*bvol2 + (1-dec)*bvol;
per_frame_79=  megabuf(n+2) = 0.04/sqrt(pow(megabuf(n),2) + pow (megabuf(n+1),2));
per_frame_80=  m = m + step; n = n+8; k= k+1;
per_frame_81=);
per_frame_82=
per_frame_83=//Projektion
per_frame_84=n = 1000; m = 2000;
per_frame_85=size_ = size*sec_s + (1-dec_s)*sqrt(size)*shapes*7;
per_frame_86=loop (shapes,
per_frame_87=  gmegabuf(n) = megabuf(m)/megabuf(m+2)/size_;
per_frame_88=  gmegabuf(n+1) = megabuf(m+1)/megabuf(m+2)/size_;
per_frame_89=  gmegabuf(n+2) = megabuf(m+2);
per_frame_90=  n = n+8; m = m+8;
per_frame_91=);
per_frame_92=
per_frame_93=reg13 = 1.7+0.25*sqrt(mid_att+bass_att); //shp rad
per_frame_94=
per_frame_95=trig = (bcount%64 == 0) && dbl_beat;
per_frame_96=if (trig, 
per_frame_97=  r1 = 4+int (rand(8));
per_frame_98=  r2 = max (2,int ((r1-2)*rand(1)));
per_frame_99=  r3 = -1*pow (2, int(rand(2)));
per_frame_100=  s1 = pow(2,int(rand(4)));
per_frame_101=  s2 = sqrt(rand(1.5))*s1;
per_frame_102=  if (rand(1)>0.5,s1=-s1,0);
per_frame_103=  s3 = -1*pow (2, int(rand(4)));
per_frame_104=  ndir = if (rand(1)<0.2,-1,1);
per_frame_105=,0);
per_frame_106=
per_frame_107=run = if (bvol_<0.4,0,if(bvol_>0.7,1,run));
per_frame_108=slow = if (certain<1.7,1,if(certain>2.5,0,slow));
per_frame_109=
per_frame_110=dir_ = dir_*dec_f+dir*(1-dec_f);
per_frame_111=q4 = ndir;
per_frame_112=movarg = min(4,(2+certain*2)/3.5)*dir_;
per_frame_113=movst  += (5+ movarg)*0.02*dt;
per_frame_114=movarg *= dt;
per_frame_115=reg60 = movst;
per_frame_116=tmove += movarg;
per_frame_117=q19=tmove;
per_frame_118=
per_frame_119=//mask shift x
per_frame_120=q20 = 1/r1;  //Anteil
per_frame_121=q22 = q20*r2; //Limit
per_frame_122=trelx += BPM/120/q20*run*dt* (1-0.5*slow) * r3 + ndir*movarg*run; //ungef. Bew. Korr
per_frame_123=q21 = q20*int(trelx); //phase
per_frame_124=
per_frame_125=//mask shift y
per_frame_126=q25 = s1;  //Divisor, 1,2,3,4,6 bei 12 tubes
per_frame_127=q26 = s2;  //Narrow
per_frame_128=trely += BPM/120/3*2*q25*s3*run*dt* (1-0.5*slow);
per_frame_129=q27 = int(trely)/q25;  //phase
per_frame_130=
per_frame_131=q10 = trel1;
per_frame_132=trig = (bcount%4==0) && dbl_beat;
per_frame_133=tbers = max(0,if (bers, tbers+dt, tbers-dt/2));
per_frame_134=tber2 = max(0,if (ber2, tber2+dt, tber2-dt/2));
per_frame_135=vc = certain+bvol*0.25;
per_frame_136=vc_=dec_s*vc_ + (1-dec_s)*max(0,certain-2);
per_frame_137=if (vc > 5.9+tbers, bers=1, if (vc < 4.5+tbers/5, bers=0;,0));
per_frame_138=if (vc > 4.5+tber2, ber2=1, if (vc < 3+tber2/5, ber2=0;,0));
per_frame_139=
per_frame_140=if (bers, if (trig, 
per_frame_141=  if (rand(35)<1,dir *=-1,0);
per_frame_142=  ddx = int (rand(4)-2)/4; 
per_frame_143=  ddy = int (rand(4)-2)/4, 0);, 
per_frame_144=  if (trig, ddx=0; ddy=0;,0));
per_frame_145=
per_frame_146=q5 = sqrt(tubes)*0.025*r9+0.005;
per_frame_147=q6 = tubes;
per_frame_148=q7 = tlen;
per_frame_149=q17=ddx; q18 = ddy; 
per_frame_150=ber2_ = ber2_*dec_s + (1-dec_s)*ber2;
per_frame_151=reg10 = min(1,pow (certain/5,2)) * ber2_; //flash
per_frame_152=
per_frame_153=reg32 = aspecty;
per_frame_154=q31 = reg51;
per_frame_155=
per_frame_156=trig = (bcount%50==0) && dbl_beat;
per_frame_157=if (trig,lc=rand(2)-1.2; lrot=rand(vc_*5)-vc_*2; lve=rand(6); ray=(rand(60)<vc+30*ray), 0);
per_frame_158=ray_ = dec_s*ray_+(1-dec_s)*ray;
per_frame_159=q2 = lc;
per_frame_160=q12 = ray_*1.2;;
per_frame_161=
per_frame_162=q1=lrot*q19*2; 
per_frame_163=q2=lc;
per_frame_164=q3=lve;
per_frame_165=
per_frame_166=tr1 += vc_*dt*0.05;
per_frame_167=tr2 += vc_*pow(sin(tr1),1)*0.5*dt;
per_frame_168=q8 = tr2;
per_frame_169=ramp = 0.5*min(1,vc_*0.25)*pow(cos(tr2*(0.5*sin(r5+time*0.053))),5);
per_frame_170=q9 = ramp+0.5;
per_frame_171=q11 = (1+mid_att/2)*0.7;
per_frame_172=q15 = bvol_;
per_frame_173=rot = 0.0; zoom = 1+movarg*0.5; warp = 0; dx = 0; dy = 0;
per_frame_174=monitor = bpm;
warp_1=`shader_body
warp_2=`{
warp_3=`float2 uv_m = 1.0 - abs( frac( uv * 0.5 ) * 2.0 - 1.0 ); // Eo.S' mirror code
warp_4=`ret.x = tex2D( sampler_fc_main, uv_m ).z; // first julia fractal iteration
warp_5=`ret.y = lerp(lerp(tex2D( sampler_fc_main, uv_m ).x, ret.x,0.5), 
warp_6=`             GetPixel(uv_orig).y,
warp_7=`             0.75); // 75% of motion blur to the green channel
warp_8=`
warp_9=`
warp_10=`float2 d = texsize.zw*6;
warp_11=`float2 uv_z = (uv_orig-0.5)*0.998 + 0.5; // a small dose of zoom-in
warp_12=`float3 dx = ( GetBlur1(uv_z + float2(1,0)*d) - GetBlur1(uv_z-float2(1,0)*d) );
warp_13=`float3 dy = ( GetBlur1(uv_z + float2(0,1)*d) - GetBlur1(uv_z-float2(0,1)*d) );
warp_14=`uv_z -=float2(dx.z,dy.z)*texsize.zw*2; //shortening of the nebulous matter
warp_15=`ret.z = max((tex2d(sampler_fc_main,uv_m).x-0.5)*3*saturate(1-length(uv_orig-0.5)*3.2), // feeded by the inner of the red channel
warp_16=`             tex2d(sampler_fc_main,uv_z).z);
warp_17=`ret.z += (tex2d(sampler_fc_main,uv_z).z - GetBlur1(saturate(uv_z)).z)*0.02; // sort of geiss' skin dot code
warp_18=`}
comp_1=`shader_body
comp_2=`{
comp_3=`    float2 d = texsize.zw*4;
comp_4=`    float3 dx = ( GetBlur1(uv+float2(1,0)*d)-GetBlur1(uv-float2(1,0)*d) );
comp_5=`    float3 dy = ( GetBlur1(uv+float2(0,1)*d)-GetBlur1(uv-float2(0,1)*d) );
comp_6=`
comp_7=`float2 uv_x = uv - float2(dx.y,dy.y)*0.1 + float2(dx.z,dy.z)*0.06;
comp_8=`ret = GetBlur2(uv_x).x*saturate(1-GetPixel(uv).y)*pow(hue_shader.yxz,8)*3;
comp_9=`ret = lerp(ret,pow(hue_shader.yzx,8)*1.4,GetPixel(uv_x).x*0.8 + GetBlur1(uv_x).x);
comp_10=`ret *= saturate(1 - GetBlur1(uv).z*4);
comp_11=`ret = lerp(ret,1,pow(hue_shader,8)*GetPixel(saturate(uv - float2(dx.z,dy.z)*2)).y*1.2);
comp_12=`ret = lerp(ret,pow(hue_shader,8).zxy*1.8,GetPixel(uv).z);
comp_13=`//MilkDrop3 Solarize Mode:
comp_14=`ret = ret*(1-ret)*4;
comp_15=`}

[SPRITE1_BEGIN]
SpriteName=sprites\rose1.png
SpriteColorKey=0x000000
SpriteLayer=0
SpriteBlend=7
SpriteAlpha=1.000000
SpriteBurn=1
SpriteX=0.000000
SpriteY=0.000000
SpriteSX=-0.560000
SpriteSY=-0.560000
SpriteRot=1.000000
SpriteSpeed=0.500000
SpriteRepeatX=1.000000
SpriteRepeatY=1.000000
code_1=new_scale=1.0+0.05*bass_att;
code_2=sx=new_scale;
code_3=sy=new_scale;
code_4=a=1.0;
[SPRITE1_END]
